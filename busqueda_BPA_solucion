def busqueda_BPA_solucion(estado_inicial, solucion):
    resuelto = False
    nodos_visitados = []
    nodos_frontera = []

    nodo_raiz = Nodo(estado_inicial)
    nodos_frontera.append(nodo_raiz)
    while (not resuelto) and len(nodos_frontera) != 0:
        nodo_actual = nodos_frontera.pop(0)
        # extraer nodo y a√±adirlo a visitados
        nodos_visitados.append(nodo_actual)
        if nodo_actual.get_estado() == solucion:
            # solucion encontrada
            resuelto = True
            return nodo_actual
        else:
            # expandir nodos hijo
            estado_nodo = nodo_actual.get_estado()

            # operador izquierdo
            hijo = [estado_nodo[1], estado_nodo[0], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[6], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_izquierda = Nodo(hijo)
            if not hijo_izquierda.en_lista(nodos_visitados) and not hijo_izquierda.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_izquierda)
               

            # operador central
            hijo = [estado_nodo[0], estado_nodo[2], estado_nodo[1], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[6], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_centro = Nodo(hijo)
            if not hijo_centro.en_lista(nodos_visitados) and not hijo_centro.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_centro)
                

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[3], estado_nodo[2]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[6], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_derecha = Nodo(hijo)
            if not hijo_derecha.en_lista(nodos_visitados) and not hijo_derecha.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha)
               

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[4]
                    , estado_nodo[3], estado_nodo[5], estado_nodo[6], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_derecha1 = Nodo(hijo)
            if not hijo_derecha1.en_lista(nodos_visitados) and not hijo_derecha1.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha1)
               

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[5], estado_nodo[4], estado_nodo[6], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_derecha2 = Nodo(hijo)
            if not hijo_derecha2.en_lista(nodos_visitados) and not hijo_derecha2.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha2)
                

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[6], estado_nodo[5], estado_nodo[7], estado_nodo[8], estado_nodo[9]]
            hijo_derecha3 = Nodo(hijo)
            if not hijo_derecha3.en_lista(nodos_visitados) and not hijo_derecha3.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha3)
               

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[7], estado_nodo[6], estado_nodo[8], estado_nodo[9]]
            hijo_derecha4 = Nodo(hijo)
            if not hijo_derecha4.en_lista(nodos_visitados) and not hijo_derecha4.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha4)
            
            
            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[6], estado_nodo[8], estado_nodo[7], estado_nodo[9]]
            hijo_derecha5 = Nodo(hijo)
            if not hijo_derecha5.en_lista(nodos_visitados) and not hijo_derecha5.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha5)
                

            # operador derecho
            hijo = [estado_nodo[0], estado_nodo[1], estado_nodo[2], estado_nodo[3]
                    , estado_nodo[4], estado_nodo[5], estado_nodo[6], estado_nodo[7], estado_nodo[9], estado_nodo[8]]
            hijo_derecha6 = Nodo(hijo)
            if not hijo_derecha6.en_lista(nodos_visitados) and not hijo_derecha6.en_lista(nodos_frontera):
                nodos_frontera.append(hijo_derecha6)
                

            nodo_actual.set_hijo([hijo_izquierda, hijo_centro, hijo_derecha, hijo_derecha1, hijo_derecha2,hijo_derecha3,hijo_derecha4,hijo_derecha5,hijo_derecha6])


if __name__ == "__main__":
    estado_inicial = [0,1,3,2,5,7,6,4,8,9]
    solucion = [0,1,2,3,4,5,6,7,8,9]
    nodo_solucion = busqueda_BPA_solucion(estado_inicial, solucion)
    # mostrar resultado
    resultado = []
    nodo_actual = nodo_solucion
    
    while nodo_actual.get_padre() is not None:
        resultado.append(nodo_actual.get_estado())
        nodo_actual = nodo_actual.get_padre()

    resultado.append(estado_inicial)
    resultado.reverse()
    print(resultado)
